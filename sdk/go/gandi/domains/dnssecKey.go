// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package domains

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-gandi/sdk/v2/go/gandi/internal"
)

type DNSSecKey struct {
	pulumi.CustomResourceState

	// DNSSEC algorithm type
	Algorithm pulumi.IntOutput `pulumi:"algorithm"`
	// Domain name
	Domain pulumi.StringOutput `pulumi:"domain"`
	// DNSSEC public key
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// DNSSEC key type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDNSSecKey registers a new resource with the given unique name, arguments, and options.
func NewDNSSecKey(ctx *pulumi.Context,
	name string, args *DNSSecKeyArgs, opts ...pulumi.ResourceOption) (*DNSSecKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Algorithm == nil {
		return nil, errors.New("invalid value for required argument 'Algorithm'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DNSSecKey
	err := ctx.RegisterResource("gandi:domains/dNSSecKey:DNSSecKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDNSSecKey gets an existing DNSSecKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDNSSecKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DNSSecKeyState, opts ...pulumi.ResourceOption) (*DNSSecKey, error) {
	var resource DNSSecKey
	err := ctx.ReadResource("gandi:domains/dNSSecKey:DNSSecKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DNSSecKey resources.
type dnssecKeyState struct {
	// DNSSEC algorithm type
	Algorithm *int `pulumi:"algorithm"`
	// Domain name
	Domain *string `pulumi:"domain"`
	// DNSSEC public key
	PublicKey *string `pulumi:"publicKey"`
	// DNSSEC key type
	Type *string `pulumi:"type"`
}

type DNSSecKeyState struct {
	// DNSSEC algorithm type
	Algorithm pulumi.IntPtrInput
	// Domain name
	Domain pulumi.StringPtrInput
	// DNSSEC public key
	PublicKey pulumi.StringPtrInput
	// DNSSEC key type
	Type pulumi.StringPtrInput
}

func (DNSSecKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnssecKeyState)(nil)).Elem()
}

type dnssecKeyArgs struct {
	// DNSSEC algorithm type
	Algorithm int `pulumi:"algorithm"`
	// Domain name
	Domain string `pulumi:"domain"`
	// DNSSEC public key
	PublicKey string `pulumi:"publicKey"`
	// DNSSEC key type
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DNSSecKey resource.
type DNSSecKeyArgs struct {
	// DNSSEC algorithm type
	Algorithm pulumi.IntInput
	// Domain name
	Domain pulumi.StringInput
	// DNSSEC public key
	PublicKey pulumi.StringInput
	// DNSSEC key type
	Type pulumi.StringInput
}

func (DNSSecKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnssecKeyArgs)(nil)).Elem()
}

type DNSSecKeyInput interface {
	pulumi.Input

	ToDNSSecKeyOutput() DNSSecKeyOutput
	ToDNSSecKeyOutputWithContext(ctx context.Context) DNSSecKeyOutput
}

func (*DNSSecKey) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSSecKey)(nil)).Elem()
}

func (i *DNSSecKey) ToDNSSecKeyOutput() DNSSecKeyOutput {
	return i.ToDNSSecKeyOutputWithContext(context.Background())
}

func (i *DNSSecKey) ToDNSSecKeyOutputWithContext(ctx context.Context) DNSSecKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSSecKeyOutput)
}

// DNSSecKeyArrayInput is an input type that accepts DNSSecKeyArray and DNSSecKeyArrayOutput values.
// You can construct a concrete instance of `DNSSecKeyArrayInput` via:
//
//	DNSSecKeyArray{ DNSSecKeyArgs{...} }
type DNSSecKeyArrayInput interface {
	pulumi.Input

	ToDNSSecKeyArrayOutput() DNSSecKeyArrayOutput
	ToDNSSecKeyArrayOutputWithContext(context.Context) DNSSecKeyArrayOutput
}

type DNSSecKeyArray []DNSSecKeyInput

func (DNSSecKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DNSSecKey)(nil)).Elem()
}

func (i DNSSecKeyArray) ToDNSSecKeyArrayOutput() DNSSecKeyArrayOutput {
	return i.ToDNSSecKeyArrayOutputWithContext(context.Background())
}

func (i DNSSecKeyArray) ToDNSSecKeyArrayOutputWithContext(ctx context.Context) DNSSecKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSSecKeyArrayOutput)
}

// DNSSecKeyMapInput is an input type that accepts DNSSecKeyMap and DNSSecKeyMapOutput values.
// You can construct a concrete instance of `DNSSecKeyMapInput` via:
//
//	DNSSecKeyMap{ "key": DNSSecKeyArgs{...} }
type DNSSecKeyMapInput interface {
	pulumi.Input

	ToDNSSecKeyMapOutput() DNSSecKeyMapOutput
	ToDNSSecKeyMapOutputWithContext(context.Context) DNSSecKeyMapOutput
}

type DNSSecKeyMap map[string]DNSSecKeyInput

func (DNSSecKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DNSSecKey)(nil)).Elem()
}

func (i DNSSecKeyMap) ToDNSSecKeyMapOutput() DNSSecKeyMapOutput {
	return i.ToDNSSecKeyMapOutputWithContext(context.Background())
}

func (i DNSSecKeyMap) ToDNSSecKeyMapOutputWithContext(ctx context.Context) DNSSecKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSSecKeyMapOutput)
}

type DNSSecKeyOutput struct{ *pulumi.OutputState }

func (DNSSecKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSSecKey)(nil)).Elem()
}

func (o DNSSecKeyOutput) ToDNSSecKeyOutput() DNSSecKeyOutput {
	return o
}

func (o DNSSecKeyOutput) ToDNSSecKeyOutputWithContext(ctx context.Context) DNSSecKeyOutput {
	return o
}

// DNSSEC algorithm type
func (o DNSSecKeyOutput) Algorithm() pulumi.IntOutput {
	return o.ApplyT(func(v *DNSSecKey) pulumi.IntOutput { return v.Algorithm }).(pulumi.IntOutput)
}

// Domain name
func (o DNSSecKeyOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *DNSSecKey) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// DNSSEC public key
func (o DNSSecKeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *DNSSecKey) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// DNSSEC key type
func (o DNSSecKeyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DNSSecKey) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DNSSecKeyArrayOutput struct{ *pulumi.OutputState }

func (DNSSecKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DNSSecKey)(nil)).Elem()
}

func (o DNSSecKeyArrayOutput) ToDNSSecKeyArrayOutput() DNSSecKeyArrayOutput {
	return o
}

func (o DNSSecKeyArrayOutput) ToDNSSecKeyArrayOutputWithContext(ctx context.Context) DNSSecKeyArrayOutput {
	return o
}

func (o DNSSecKeyArrayOutput) Index(i pulumi.IntInput) DNSSecKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DNSSecKey {
		return vs[0].([]*DNSSecKey)[vs[1].(int)]
	}).(DNSSecKeyOutput)
}

type DNSSecKeyMapOutput struct{ *pulumi.OutputState }

func (DNSSecKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DNSSecKey)(nil)).Elem()
}

func (o DNSSecKeyMapOutput) ToDNSSecKeyMapOutput() DNSSecKeyMapOutput {
	return o
}

func (o DNSSecKeyMapOutput) ToDNSSecKeyMapOutputWithContext(ctx context.Context) DNSSecKeyMapOutput {
	return o
}

func (o DNSSecKeyMapOutput) MapIndex(k pulumi.StringInput) DNSSecKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DNSSecKey {
		return vs[0].(map[string]*DNSSecKey)[vs[1].(string)]
	}).(DNSSecKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DNSSecKeyInput)(nil)).Elem(), &DNSSecKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSSecKeyArrayInput)(nil)).Elem(), DNSSecKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSSecKeyMapInput)(nil)).Elem(), DNSSecKeyMap{})
	pulumi.RegisterOutputType(DNSSecKeyOutput{})
	pulumi.RegisterOutputType(DNSSecKeyArrayOutput{})
	pulumi.RegisterOutputType(DNSSecKeyMapOutput{})
}
