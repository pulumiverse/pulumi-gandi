// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package domains

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-gandi/sdk/v2/go/gandi/internal"
)

var _ = internal.GetEnvOrDefault

type DomainAdmin struct {
	// City for the contact
	City string `pulumi:"city"`
	// The two letter country code for the contact
	Country string `pulumi:"country"`
	// Whether or not to obfuscate contact data in WHOIS
	DataObfuscated *bool `pulumi:"dataObfuscated"`
	// Contact email address
	Email string `pulumi:"email"`
	// Extra parameters, needed for some jurisdictions
	ExtraParameters map[string]string `pulumi:"extraParameters"`
	// Family name of the contact
	FamilyName string `pulumi:"familyName"`
	// Given name of the contact
	GivenName string `pulumi:"givenName"`
	// Whether or not to obfuscate contact email in WHOIS
	MailObfuscated *bool `pulumi:"mailObfuscated"`
	// The legal name of the organisation. Required for types other than person
	Organisation *string `pulumi:"organisation"`
	// Phone number for the contact
	Phone string `pulumi:"phone"`
	// The state code for the contact
	State *string `pulumi:"state"`
	// Street Address of the contact
	StreetAddr string `pulumi:"streetAddr"`
	// One of 'person', 'company', 'association', 'public body', or 'reseller'
	Type string `pulumi:"type"`
	// Postal Code/Zipcode of the contact
	Zip string `pulumi:"zip"`
}

// DomainAdminInput is an input type that accepts DomainAdminArgs and DomainAdminOutput values.
// You can construct a concrete instance of `DomainAdminInput` via:
//
//	DomainAdminArgs{...}
type DomainAdminInput interface {
	pulumi.Input

	ToDomainAdminOutput() DomainAdminOutput
	ToDomainAdminOutputWithContext(context.Context) DomainAdminOutput
}

type DomainAdminArgs struct {
	// City for the contact
	City pulumi.StringInput `pulumi:"city"`
	// The two letter country code for the contact
	Country pulumi.StringInput `pulumi:"country"`
	// Whether or not to obfuscate contact data in WHOIS
	DataObfuscated pulumi.BoolPtrInput `pulumi:"dataObfuscated"`
	// Contact email address
	Email pulumi.StringInput `pulumi:"email"`
	// Extra parameters, needed for some jurisdictions
	ExtraParameters pulumi.StringMapInput `pulumi:"extraParameters"`
	// Family name of the contact
	FamilyName pulumi.StringInput `pulumi:"familyName"`
	// Given name of the contact
	GivenName pulumi.StringInput `pulumi:"givenName"`
	// Whether or not to obfuscate contact email in WHOIS
	MailObfuscated pulumi.BoolPtrInput `pulumi:"mailObfuscated"`
	// The legal name of the organisation. Required for types other than person
	Organisation pulumi.StringPtrInput `pulumi:"organisation"`
	// Phone number for the contact
	Phone pulumi.StringInput `pulumi:"phone"`
	// The state code for the contact
	State pulumi.StringPtrInput `pulumi:"state"`
	// Street Address of the contact
	StreetAddr pulumi.StringInput `pulumi:"streetAddr"`
	// One of 'person', 'company', 'association', 'public body', or 'reseller'
	Type pulumi.StringInput `pulumi:"type"`
	// Postal Code/Zipcode of the contact
	Zip pulumi.StringInput `pulumi:"zip"`
}

func (DomainAdminArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAdmin)(nil)).Elem()
}

func (i DomainAdminArgs) ToDomainAdminOutput() DomainAdminOutput {
	return i.ToDomainAdminOutputWithContext(context.Background())
}

func (i DomainAdminArgs) ToDomainAdminOutputWithContext(ctx context.Context) DomainAdminOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAdminOutput)
}

func (i DomainAdminArgs) ToDomainAdminPtrOutput() DomainAdminPtrOutput {
	return i.ToDomainAdminPtrOutputWithContext(context.Background())
}

func (i DomainAdminArgs) ToDomainAdminPtrOutputWithContext(ctx context.Context) DomainAdminPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAdminOutput).ToDomainAdminPtrOutputWithContext(ctx)
}

// DomainAdminPtrInput is an input type that accepts DomainAdminArgs, DomainAdminPtr and DomainAdminPtrOutput values.
// You can construct a concrete instance of `DomainAdminPtrInput` via:
//
//	        DomainAdminArgs{...}
//
//	or:
//
//	        nil
type DomainAdminPtrInput interface {
	pulumi.Input

	ToDomainAdminPtrOutput() DomainAdminPtrOutput
	ToDomainAdminPtrOutputWithContext(context.Context) DomainAdminPtrOutput
}

type domainAdminPtrType DomainAdminArgs

func DomainAdminPtr(v *DomainAdminArgs) DomainAdminPtrInput {
	return (*domainAdminPtrType)(v)
}

func (*domainAdminPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainAdmin)(nil)).Elem()
}

func (i *domainAdminPtrType) ToDomainAdminPtrOutput() DomainAdminPtrOutput {
	return i.ToDomainAdminPtrOutputWithContext(context.Background())
}

func (i *domainAdminPtrType) ToDomainAdminPtrOutputWithContext(ctx context.Context) DomainAdminPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAdminPtrOutput)
}

type DomainAdminOutput struct{ *pulumi.OutputState }

func (DomainAdminOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAdmin)(nil)).Elem()
}

func (o DomainAdminOutput) ToDomainAdminOutput() DomainAdminOutput {
	return o
}

func (o DomainAdminOutput) ToDomainAdminOutputWithContext(ctx context.Context) DomainAdminOutput {
	return o
}

func (o DomainAdminOutput) ToDomainAdminPtrOutput() DomainAdminPtrOutput {
	return o.ToDomainAdminPtrOutputWithContext(context.Background())
}

func (o DomainAdminOutput) ToDomainAdminPtrOutputWithContext(ctx context.Context) DomainAdminPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainAdmin) *DomainAdmin {
		return &v
	}).(DomainAdminPtrOutput)
}

// City for the contact
func (o DomainAdminOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v DomainAdmin) string { return v.City }).(pulumi.StringOutput)
}

// The two letter country code for the contact
func (o DomainAdminOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v DomainAdmin) string { return v.Country }).(pulumi.StringOutput)
}

// Whether or not to obfuscate contact data in WHOIS
func (o DomainAdminOutput) DataObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainAdmin) *bool { return v.DataObfuscated }).(pulumi.BoolPtrOutput)
}

// Contact email address
func (o DomainAdminOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v DomainAdmin) string { return v.Email }).(pulumi.StringOutput)
}

// Extra parameters, needed for some jurisdictions
func (o DomainAdminOutput) ExtraParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v DomainAdmin) map[string]string { return v.ExtraParameters }).(pulumi.StringMapOutput)
}

// Family name of the contact
func (o DomainAdminOutput) FamilyName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainAdmin) string { return v.FamilyName }).(pulumi.StringOutput)
}

// Given name of the contact
func (o DomainAdminOutput) GivenName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainAdmin) string { return v.GivenName }).(pulumi.StringOutput)
}

// Whether or not to obfuscate contact email in WHOIS
func (o DomainAdminOutput) MailObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainAdmin) *bool { return v.MailObfuscated }).(pulumi.BoolPtrOutput)
}

// The legal name of the organisation. Required for types other than person
func (o DomainAdminOutput) Organisation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainAdmin) *string { return v.Organisation }).(pulumi.StringPtrOutput)
}

// Phone number for the contact
func (o DomainAdminOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v DomainAdmin) string { return v.Phone }).(pulumi.StringOutput)
}

// The state code for the contact
func (o DomainAdminOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainAdmin) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Street Address of the contact
func (o DomainAdminOutput) StreetAddr() pulumi.StringOutput {
	return o.ApplyT(func(v DomainAdmin) string { return v.StreetAddr }).(pulumi.StringOutput)
}

// One of 'person', 'company', 'association', 'public body', or 'reseller'
func (o DomainAdminOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DomainAdmin) string { return v.Type }).(pulumi.StringOutput)
}

// Postal Code/Zipcode of the contact
func (o DomainAdminOutput) Zip() pulumi.StringOutput {
	return o.ApplyT(func(v DomainAdmin) string { return v.Zip }).(pulumi.StringOutput)
}

type DomainAdminPtrOutput struct{ *pulumi.OutputState }

func (DomainAdminPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainAdmin)(nil)).Elem()
}

func (o DomainAdminPtrOutput) ToDomainAdminPtrOutput() DomainAdminPtrOutput {
	return o
}

func (o DomainAdminPtrOutput) ToDomainAdminPtrOutputWithContext(ctx context.Context) DomainAdminPtrOutput {
	return o
}

func (o DomainAdminPtrOutput) Elem() DomainAdminOutput {
	return o.ApplyT(func(v *DomainAdmin) DomainAdmin {
		if v != nil {
			return *v
		}
		var ret DomainAdmin
		return ret
	}).(DomainAdminOutput)
}

// City for the contact
func (o DomainAdminPtrOutput) City() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainAdmin) *string {
		if v == nil {
			return nil
		}
		return &v.City
	}).(pulumi.StringPtrOutput)
}

// The two letter country code for the contact
func (o DomainAdminPtrOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainAdmin) *string {
		if v == nil {
			return nil
		}
		return &v.Country
	}).(pulumi.StringPtrOutput)
}

// Whether or not to obfuscate contact data in WHOIS
func (o DomainAdminPtrOutput) DataObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainAdmin) *bool {
		if v == nil {
			return nil
		}
		return v.DataObfuscated
	}).(pulumi.BoolPtrOutput)
}

// Contact email address
func (o DomainAdminPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainAdmin) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// Extra parameters, needed for some jurisdictions
func (o DomainAdminPtrOutput) ExtraParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DomainAdmin) map[string]string {
		if v == nil {
			return nil
		}
		return v.ExtraParameters
	}).(pulumi.StringMapOutput)
}

// Family name of the contact
func (o DomainAdminPtrOutput) FamilyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainAdmin) *string {
		if v == nil {
			return nil
		}
		return &v.FamilyName
	}).(pulumi.StringPtrOutput)
}

// Given name of the contact
func (o DomainAdminPtrOutput) GivenName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainAdmin) *string {
		if v == nil {
			return nil
		}
		return &v.GivenName
	}).(pulumi.StringPtrOutput)
}

// Whether or not to obfuscate contact email in WHOIS
func (o DomainAdminPtrOutput) MailObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainAdmin) *bool {
		if v == nil {
			return nil
		}
		return v.MailObfuscated
	}).(pulumi.BoolPtrOutput)
}

// The legal name of the organisation. Required for types other than person
func (o DomainAdminPtrOutput) Organisation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainAdmin) *string {
		if v == nil {
			return nil
		}
		return v.Organisation
	}).(pulumi.StringPtrOutput)
}

// Phone number for the contact
func (o DomainAdminPtrOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainAdmin) *string {
		if v == nil {
			return nil
		}
		return &v.Phone
	}).(pulumi.StringPtrOutput)
}

// The state code for the contact
func (o DomainAdminPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainAdmin) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Street Address of the contact
func (o DomainAdminPtrOutput) StreetAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainAdmin) *string {
		if v == nil {
			return nil
		}
		return &v.StreetAddr
	}).(pulumi.StringPtrOutput)
}

// One of 'person', 'company', 'association', 'public body', or 'reseller'
func (o DomainAdminPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainAdmin) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Postal Code/Zipcode of the contact
func (o DomainAdminPtrOutput) Zip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainAdmin) *string {
		if v == nil {
			return nil
		}
		return &v.Zip
	}).(pulumi.StringPtrOutput)
}

type DomainBilling struct {
	// City for the contact
	City string `pulumi:"city"`
	// The two letter country code for the contact
	Country string `pulumi:"country"`
	// Whether or not to obfuscate contact data in WHOIS
	DataObfuscated *bool `pulumi:"dataObfuscated"`
	// Contact email address
	Email string `pulumi:"email"`
	// Extra parameters, needed for some jurisdictions
	ExtraParameters map[string]string `pulumi:"extraParameters"`
	// Family name of the contact
	FamilyName string `pulumi:"familyName"`
	// Given name of the contact
	GivenName string `pulumi:"givenName"`
	// Whether or not to obfuscate contact email in WHOIS
	MailObfuscated *bool `pulumi:"mailObfuscated"`
	// The legal name of the organisation. Required for types other than person
	Organisation *string `pulumi:"organisation"`
	// Phone number for the contact
	Phone string `pulumi:"phone"`
	// The state code for the contact
	State *string `pulumi:"state"`
	// Street Address of the contact
	StreetAddr string `pulumi:"streetAddr"`
	// One of 'person', 'company', 'association', 'public body', or 'reseller'
	Type string `pulumi:"type"`
	// Postal Code/Zipcode of the contact
	Zip string `pulumi:"zip"`
}

// DomainBillingInput is an input type that accepts DomainBillingArgs and DomainBillingOutput values.
// You can construct a concrete instance of `DomainBillingInput` via:
//
//	DomainBillingArgs{...}
type DomainBillingInput interface {
	pulumi.Input

	ToDomainBillingOutput() DomainBillingOutput
	ToDomainBillingOutputWithContext(context.Context) DomainBillingOutput
}

type DomainBillingArgs struct {
	// City for the contact
	City pulumi.StringInput `pulumi:"city"`
	// The two letter country code for the contact
	Country pulumi.StringInput `pulumi:"country"`
	// Whether or not to obfuscate contact data in WHOIS
	DataObfuscated pulumi.BoolPtrInput `pulumi:"dataObfuscated"`
	// Contact email address
	Email pulumi.StringInput `pulumi:"email"`
	// Extra parameters, needed for some jurisdictions
	ExtraParameters pulumi.StringMapInput `pulumi:"extraParameters"`
	// Family name of the contact
	FamilyName pulumi.StringInput `pulumi:"familyName"`
	// Given name of the contact
	GivenName pulumi.StringInput `pulumi:"givenName"`
	// Whether or not to obfuscate contact email in WHOIS
	MailObfuscated pulumi.BoolPtrInput `pulumi:"mailObfuscated"`
	// The legal name of the organisation. Required for types other than person
	Organisation pulumi.StringPtrInput `pulumi:"organisation"`
	// Phone number for the contact
	Phone pulumi.StringInput `pulumi:"phone"`
	// The state code for the contact
	State pulumi.StringPtrInput `pulumi:"state"`
	// Street Address of the contact
	StreetAddr pulumi.StringInput `pulumi:"streetAddr"`
	// One of 'person', 'company', 'association', 'public body', or 'reseller'
	Type pulumi.StringInput `pulumi:"type"`
	// Postal Code/Zipcode of the contact
	Zip pulumi.StringInput `pulumi:"zip"`
}

func (DomainBillingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainBilling)(nil)).Elem()
}

func (i DomainBillingArgs) ToDomainBillingOutput() DomainBillingOutput {
	return i.ToDomainBillingOutputWithContext(context.Background())
}

func (i DomainBillingArgs) ToDomainBillingOutputWithContext(ctx context.Context) DomainBillingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainBillingOutput)
}

func (i DomainBillingArgs) ToDomainBillingPtrOutput() DomainBillingPtrOutput {
	return i.ToDomainBillingPtrOutputWithContext(context.Background())
}

func (i DomainBillingArgs) ToDomainBillingPtrOutputWithContext(ctx context.Context) DomainBillingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainBillingOutput).ToDomainBillingPtrOutputWithContext(ctx)
}

// DomainBillingPtrInput is an input type that accepts DomainBillingArgs, DomainBillingPtr and DomainBillingPtrOutput values.
// You can construct a concrete instance of `DomainBillingPtrInput` via:
//
//	        DomainBillingArgs{...}
//
//	or:
//
//	        nil
type DomainBillingPtrInput interface {
	pulumi.Input

	ToDomainBillingPtrOutput() DomainBillingPtrOutput
	ToDomainBillingPtrOutputWithContext(context.Context) DomainBillingPtrOutput
}

type domainBillingPtrType DomainBillingArgs

func DomainBillingPtr(v *DomainBillingArgs) DomainBillingPtrInput {
	return (*domainBillingPtrType)(v)
}

func (*domainBillingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainBilling)(nil)).Elem()
}

func (i *domainBillingPtrType) ToDomainBillingPtrOutput() DomainBillingPtrOutput {
	return i.ToDomainBillingPtrOutputWithContext(context.Background())
}

func (i *domainBillingPtrType) ToDomainBillingPtrOutputWithContext(ctx context.Context) DomainBillingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainBillingPtrOutput)
}

type DomainBillingOutput struct{ *pulumi.OutputState }

func (DomainBillingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainBilling)(nil)).Elem()
}

func (o DomainBillingOutput) ToDomainBillingOutput() DomainBillingOutput {
	return o
}

func (o DomainBillingOutput) ToDomainBillingOutputWithContext(ctx context.Context) DomainBillingOutput {
	return o
}

func (o DomainBillingOutput) ToDomainBillingPtrOutput() DomainBillingPtrOutput {
	return o.ToDomainBillingPtrOutputWithContext(context.Background())
}

func (o DomainBillingOutput) ToDomainBillingPtrOutputWithContext(ctx context.Context) DomainBillingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainBilling) *DomainBilling {
		return &v
	}).(DomainBillingPtrOutput)
}

// City for the contact
func (o DomainBillingOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v DomainBilling) string { return v.City }).(pulumi.StringOutput)
}

// The two letter country code for the contact
func (o DomainBillingOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v DomainBilling) string { return v.Country }).(pulumi.StringOutput)
}

// Whether or not to obfuscate contact data in WHOIS
func (o DomainBillingOutput) DataObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainBilling) *bool { return v.DataObfuscated }).(pulumi.BoolPtrOutput)
}

// Contact email address
func (o DomainBillingOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v DomainBilling) string { return v.Email }).(pulumi.StringOutput)
}

// Extra parameters, needed for some jurisdictions
func (o DomainBillingOutput) ExtraParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v DomainBilling) map[string]string { return v.ExtraParameters }).(pulumi.StringMapOutput)
}

// Family name of the contact
func (o DomainBillingOutput) FamilyName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainBilling) string { return v.FamilyName }).(pulumi.StringOutput)
}

// Given name of the contact
func (o DomainBillingOutput) GivenName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainBilling) string { return v.GivenName }).(pulumi.StringOutput)
}

// Whether or not to obfuscate contact email in WHOIS
func (o DomainBillingOutput) MailObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainBilling) *bool { return v.MailObfuscated }).(pulumi.BoolPtrOutput)
}

// The legal name of the organisation. Required for types other than person
func (o DomainBillingOutput) Organisation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainBilling) *string { return v.Organisation }).(pulumi.StringPtrOutput)
}

// Phone number for the contact
func (o DomainBillingOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v DomainBilling) string { return v.Phone }).(pulumi.StringOutput)
}

// The state code for the contact
func (o DomainBillingOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainBilling) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Street Address of the contact
func (o DomainBillingOutput) StreetAddr() pulumi.StringOutput {
	return o.ApplyT(func(v DomainBilling) string { return v.StreetAddr }).(pulumi.StringOutput)
}

// One of 'person', 'company', 'association', 'public body', or 'reseller'
func (o DomainBillingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DomainBilling) string { return v.Type }).(pulumi.StringOutput)
}

// Postal Code/Zipcode of the contact
func (o DomainBillingOutput) Zip() pulumi.StringOutput {
	return o.ApplyT(func(v DomainBilling) string { return v.Zip }).(pulumi.StringOutput)
}

type DomainBillingPtrOutput struct{ *pulumi.OutputState }

func (DomainBillingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainBilling)(nil)).Elem()
}

func (o DomainBillingPtrOutput) ToDomainBillingPtrOutput() DomainBillingPtrOutput {
	return o
}

func (o DomainBillingPtrOutput) ToDomainBillingPtrOutputWithContext(ctx context.Context) DomainBillingPtrOutput {
	return o
}

func (o DomainBillingPtrOutput) Elem() DomainBillingOutput {
	return o.ApplyT(func(v *DomainBilling) DomainBilling {
		if v != nil {
			return *v
		}
		var ret DomainBilling
		return ret
	}).(DomainBillingOutput)
}

// City for the contact
func (o DomainBillingPtrOutput) City() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainBilling) *string {
		if v == nil {
			return nil
		}
		return &v.City
	}).(pulumi.StringPtrOutput)
}

// The two letter country code for the contact
func (o DomainBillingPtrOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainBilling) *string {
		if v == nil {
			return nil
		}
		return &v.Country
	}).(pulumi.StringPtrOutput)
}

// Whether or not to obfuscate contact data in WHOIS
func (o DomainBillingPtrOutput) DataObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainBilling) *bool {
		if v == nil {
			return nil
		}
		return v.DataObfuscated
	}).(pulumi.BoolPtrOutput)
}

// Contact email address
func (o DomainBillingPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainBilling) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// Extra parameters, needed for some jurisdictions
func (o DomainBillingPtrOutput) ExtraParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DomainBilling) map[string]string {
		if v == nil {
			return nil
		}
		return v.ExtraParameters
	}).(pulumi.StringMapOutput)
}

// Family name of the contact
func (o DomainBillingPtrOutput) FamilyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainBilling) *string {
		if v == nil {
			return nil
		}
		return &v.FamilyName
	}).(pulumi.StringPtrOutput)
}

// Given name of the contact
func (o DomainBillingPtrOutput) GivenName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainBilling) *string {
		if v == nil {
			return nil
		}
		return &v.GivenName
	}).(pulumi.StringPtrOutput)
}

// Whether or not to obfuscate contact email in WHOIS
func (o DomainBillingPtrOutput) MailObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainBilling) *bool {
		if v == nil {
			return nil
		}
		return v.MailObfuscated
	}).(pulumi.BoolPtrOutput)
}

// The legal name of the organisation. Required for types other than person
func (o DomainBillingPtrOutput) Organisation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainBilling) *string {
		if v == nil {
			return nil
		}
		return v.Organisation
	}).(pulumi.StringPtrOutput)
}

// Phone number for the contact
func (o DomainBillingPtrOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainBilling) *string {
		if v == nil {
			return nil
		}
		return &v.Phone
	}).(pulumi.StringPtrOutput)
}

// The state code for the contact
func (o DomainBillingPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainBilling) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Street Address of the contact
func (o DomainBillingPtrOutput) StreetAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainBilling) *string {
		if v == nil {
			return nil
		}
		return &v.StreetAddr
	}).(pulumi.StringPtrOutput)
}

// One of 'person', 'company', 'association', 'public body', or 'reseller'
func (o DomainBillingPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainBilling) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Postal Code/Zipcode of the contact
func (o DomainBillingPtrOutput) Zip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainBilling) *string {
		if v == nil {
			return nil
		}
		return &v.Zip
	}).(pulumi.StringPtrOutput)
}

type DomainOwner struct {
	// City for the contact
	City string `pulumi:"city"`
	// The two letter country code for the contact
	Country string `pulumi:"country"`
	// Whether or not to obfuscate contact data in WHOIS
	DataObfuscated *bool `pulumi:"dataObfuscated"`
	// Contact email address
	Email string `pulumi:"email"`
	// Extra parameters, needed for some jurisdictions
	ExtraParameters map[string]string `pulumi:"extraParameters"`
	// Family name of the contact
	FamilyName string `pulumi:"familyName"`
	// Given name of the contact
	GivenName string `pulumi:"givenName"`
	// Whether or not to obfuscate contact email in WHOIS
	MailObfuscated *bool `pulumi:"mailObfuscated"`
	// The legal name of the organisation. Required for types other than person
	Organisation *string `pulumi:"organisation"`
	// Phone number for the contact
	Phone string `pulumi:"phone"`
	// The state code for the contact
	State *string `pulumi:"state"`
	// Street Address of the contact
	StreetAddr string `pulumi:"streetAddr"`
	// One of 'person', 'company', 'association', 'public body', or 'reseller'
	Type string `pulumi:"type"`
	// Postal Code/Zipcode of the contact
	Zip string `pulumi:"zip"`
}

// DomainOwnerInput is an input type that accepts DomainOwnerArgs and DomainOwnerOutput values.
// You can construct a concrete instance of `DomainOwnerInput` via:
//
//	DomainOwnerArgs{...}
type DomainOwnerInput interface {
	pulumi.Input

	ToDomainOwnerOutput() DomainOwnerOutput
	ToDomainOwnerOutputWithContext(context.Context) DomainOwnerOutput
}

type DomainOwnerArgs struct {
	// City for the contact
	City pulumi.StringInput `pulumi:"city"`
	// The two letter country code for the contact
	Country pulumi.StringInput `pulumi:"country"`
	// Whether or not to obfuscate contact data in WHOIS
	DataObfuscated pulumi.BoolPtrInput `pulumi:"dataObfuscated"`
	// Contact email address
	Email pulumi.StringInput `pulumi:"email"`
	// Extra parameters, needed for some jurisdictions
	ExtraParameters pulumi.StringMapInput `pulumi:"extraParameters"`
	// Family name of the contact
	FamilyName pulumi.StringInput `pulumi:"familyName"`
	// Given name of the contact
	GivenName pulumi.StringInput `pulumi:"givenName"`
	// Whether or not to obfuscate contact email in WHOIS
	MailObfuscated pulumi.BoolPtrInput `pulumi:"mailObfuscated"`
	// The legal name of the organisation. Required for types other than person
	Organisation pulumi.StringPtrInput `pulumi:"organisation"`
	// Phone number for the contact
	Phone pulumi.StringInput `pulumi:"phone"`
	// The state code for the contact
	State pulumi.StringPtrInput `pulumi:"state"`
	// Street Address of the contact
	StreetAddr pulumi.StringInput `pulumi:"streetAddr"`
	// One of 'person', 'company', 'association', 'public body', or 'reseller'
	Type pulumi.StringInput `pulumi:"type"`
	// Postal Code/Zipcode of the contact
	Zip pulumi.StringInput `pulumi:"zip"`
}

func (DomainOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainOwner)(nil)).Elem()
}

func (i DomainOwnerArgs) ToDomainOwnerOutput() DomainOwnerOutput {
	return i.ToDomainOwnerOutputWithContext(context.Background())
}

func (i DomainOwnerArgs) ToDomainOwnerOutputWithContext(ctx context.Context) DomainOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainOwnerOutput)
}

func (i DomainOwnerArgs) ToDomainOwnerPtrOutput() DomainOwnerPtrOutput {
	return i.ToDomainOwnerPtrOutputWithContext(context.Background())
}

func (i DomainOwnerArgs) ToDomainOwnerPtrOutputWithContext(ctx context.Context) DomainOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainOwnerOutput).ToDomainOwnerPtrOutputWithContext(ctx)
}

// DomainOwnerPtrInput is an input type that accepts DomainOwnerArgs, DomainOwnerPtr and DomainOwnerPtrOutput values.
// You can construct a concrete instance of `DomainOwnerPtrInput` via:
//
//	        DomainOwnerArgs{...}
//
//	or:
//
//	        nil
type DomainOwnerPtrInput interface {
	pulumi.Input

	ToDomainOwnerPtrOutput() DomainOwnerPtrOutput
	ToDomainOwnerPtrOutputWithContext(context.Context) DomainOwnerPtrOutput
}

type domainOwnerPtrType DomainOwnerArgs

func DomainOwnerPtr(v *DomainOwnerArgs) DomainOwnerPtrInput {
	return (*domainOwnerPtrType)(v)
}

func (*domainOwnerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainOwner)(nil)).Elem()
}

func (i *domainOwnerPtrType) ToDomainOwnerPtrOutput() DomainOwnerPtrOutput {
	return i.ToDomainOwnerPtrOutputWithContext(context.Background())
}

func (i *domainOwnerPtrType) ToDomainOwnerPtrOutputWithContext(ctx context.Context) DomainOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainOwnerPtrOutput)
}

type DomainOwnerOutput struct{ *pulumi.OutputState }

func (DomainOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainOwner)(nil)).Elem()
}

func (o DomainOwnerOutput) ToDomainOwnerOutput() DomainOwnerOutput {
	return o
}

func (o DomainOwnerOutput) ToDomainOwnerOutputWithContext(ctx context.Context) DomainOwnerOutput {
	return o
}

func (o DomainOwnerOutput) ToDomainOwnerPtrOutput() DomainOwnerPtrOutput {
	return o.ToDomainOwnerPtrOutputWithContext(context.Background())
}

func (o DomainOwnerOutput) ToDomainOwnerPtrOutputWithContext(ctx context.Context) DomainOwnerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainOwner) *DomainOwner {
		return &v
	}).(DomainOwnerPtrOutput)
}

// City for the contact
func (o DomainOwnerOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v DomainOwner) string { return v.City }).(pulumi.StringOutput)
}

// The two letter country code for the contact
func (o DomainOwnerOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v DomainOwner) string { return v.Country }).(pulumi.StringOutput)
}

// Whether or not to obfuscate contact data in WHOIS
func (o DomainOwnerOutput) DataObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainOwner) *bool { return v.DataObfuscated }).(pulumi.BoolPtrOutput)
}

// Contact email address
func (o DomainOwnerOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v DomainOwner) string { return v.Email }).(pulumi.StringOutput)
}

// Extra parameters, needed for some jurisdictions
func (o DomainOwnerOutput) ExtraParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v DomainOwner) map[string]string { return v.ExtraParameters }).(pulumi.StringMapOutput)
}

// Family name of the contact
func (o DomainOwnerOutput) FamilyName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainOwner) string { return v.FamilyName }).(pulumi.StringOutput)
}

// Given name of the contact
func (o DomainOwnerOutput) GivenName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainOwner) string { return v.GivenName }).(pulumi.StringOutput)
}

// Whether or not to obfuscate contact email in WHOIS
func (o DomainOwnerOutput) MailObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainOwner) *bool { return v.MailObfuscated }).(pulumi.BoolPtrOutput)
}

// The legal name of the organisation. Required for types other than person
func (o DomainOwnerOutput) Organisation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainOwner) *string { return v.Organisation }).(pulumi.StringPtrOutput)
}

// Phone number for the contact
func (o DomainOwnerOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v DomainOwner) string { return v.Phone }).(pulumi.StringOutput)
}

// The state code for the contact
func (o DomainOwnerOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainOwner) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Street Address of the contact
func (o DomainOwnerOutput) StreetAddr() pulumi.StringOutput {
	return o.ApplyT(func(v DomainOwner) string { return v.StreetAddr }).(pulumi.StringOutput)
}

// One of 'person', 'company', 'association', 'public body', or 'reseller'
func (o DomainOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DomainOwner) string { return v.Type }).(pulumi.StringOutput)
}

// Postal Code/Zipcode of the contact
func (o DomainOwnerOutput) Zip() pulumi.StringOutput {
	return o.ApplyT(func(v DomainOwner) string { return v.Zip }).(pulumi.StringOutput)
}

type DomainOwnerPtrOutput struct{ *pulumi.OutputState }

func (DomainOwnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainOwner)(nil)).Elem()
}

func (o DomainOwnerPtrOutput) ToDomainOwnerPtrOutput() DomainOwnerPtrOutput {
	return o
}

func (o DomainOwnerPtrOutput) ToDomainOwnerPtrOutputWithContext(ctx context.Context) DomainOwnerPtrOutput {
	return o
}

func (o DomainOwnerPtrOutput) Elem() DomainOwnerOutput {
	return o.ApplyT(func(v *DomainOwner) DomainOwner {
		if v != nil {
			return *v
		}
		var ret DomainOwner
		return ret
	}).(DomainOwnerOutput)
}

// City for the contact
func (o DomainOwnerPtrOutput) City() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainOwner) *string {
		if v == nil {
			return nil
		}
		return &v.City
	}).(pulumi.StringPtrOutput)
}

// The two letter country code for the contact
func (o DomainOwnerPtrOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Country
	}).(pulumi.StringPtrOutput)
}

// Whether or not to obfuscate contact data in WHOIS
func (o DomainOwnerPtrOutput) DataObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainOwner) *bool {
		if v == nil {
			return nil
		}
		return v.DataObfuscated
	}).(pulumi.BoolPtrOutput)
}

// Contact email address
func (o DomainOwnerPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// Extra parameters, needed for some jurisdictions
func (o DomainOwnerPtrOutput) ExtraParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DomainOwner) map[string]string {
		if v == nil {
			return nil
		}
		return v.ExtraParameters
	}).(pulumi.StringMapOutput)
}

// Family name of the contact
func (o DomainOwnerPtrOutput) FamilyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainOwner) *string {
		if v == nil {
			return nil
		}
		return &v.FamilyName
	}).(pulumi.StringPtrOutput)
}

// Given name of the contact
func (o DomainOwnerPtrOutput) GivenName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainOwner) *string {
		if v == nil {
			return nil
		}
		return &v.GivenName
	}).(pulumi.StringPtrOutput)
}

// Whether or not to obfuscate contact email in WHOIS
func (o DomainOwnerPtrOutput) MailObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainOwner) *bool {
		if v == nil {
			return nil
		}
		return v.MailObfuscated
	}).(pulumi.BoolPtrOutput)
}

// The legal name of the organisation. Required for types other than person
func (o DomainOwnerPtrOutput) Organisation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainOwner) *string {
		if v == nil {
			return nil
		}
		return v.Organisation
	}).(pulumi.StringPtrOutput)
}

// Phone number for the contact
func (o DomainOwnerPtrOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Phone
	}).(pulumi.StringPtrOutput)
}

// The state code for the contact
func (o DomainOwnerPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainOwner) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Street Address of the contact
func (o DomainOwnerPtrOutput) StreetAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainOwner) *string {
		if v == nil {
			return nil
		}
		return &v.StreetAddr
	}).(pulumi.StringPtrOutput)
}

// One of 'person', 'company', 'association', 'public body', or 'reseller'
func (o DomainOwnerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Postal Code/Zipcode of the contact
func (o DomainOwnerPtrOutput) Zip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Zip
	}).(pulumi.StringPtrOutput)
}

type DomainTech struct {
	// City for the contact
	City string `pulumi:"city"`
	// The two letter country code for the contact
	Country string `pulumi:"country"`
	// Whether or not to obfuscate contact data in WHOIS
	DataObfuscated *bool `pulumi:"dataObfuscated"`
	// Contact email address
	Email string `pulumi:"email"`
	// Extra parameters, needed for some jurisdictions
	ExtraParameters map[string]string `pulumi:"extraParameters"`
	// Family name of the contact
	FamilyName string `pulumi:"familyName"`
	// Given name of the contact
	GivenName string `pulumi:"givenName"`
	// Whether or not to obfuscate contact email in WHOIS
	MailObfuscated *bool `pulumi:"mailObfuscated"`
	// The legal name of the organisation. Required for types other than person
	Organisation *string `pulumi:"organisation"`
	// Phone number for the contact
	Phone string `pulumi:"phone"`
	// The state code for the contact
	State *string `pulumi:"state"`
	// Street Address of the contact
	StreetAddr string `pulumi:"streetAddr"`
	// One of 'person', 'company', 'association', 'public body', or 'reseller'
	Type string `pulumi:"type"`
	// Postal Code/Zipcode of the contact
	Zip string `pulumi:"zip"`
}

// DomainTechInput is an input type that accepts DomainTechArgs and DomainTechOutput values.
// You can construct a concrete instance of `DomainTechInput` via:
//
//	DomainTechArgs{...}
type DomainTechInput interface {
	pulumi.Input

	ToDomainTechOutput() DomainTechOutput
	ToDomainTechOutputWithContext(context.Context) DomainTechOutput
}

type DomainTechArgs struct {
	// City for the contact
	City pulumi.StringInput `pulumi:"city"`
	// The two letter country code for the contact
	Country pulumi.StringInput `pulumi:"country"`
	// Whether or not to obfuscate contact data in WHOIS
	DataObfuscated pulumi.BoolPtrInput `pulumi:"dataObfuscated"`
	// Contact email address
	Email pulumi.StringInput `pulumi:"email"`
	// Extra parameters, needed for some jurisdictions
	ExtraParameters pulumi.StringMapInput `pulumi:"extraParameters"`
	// Family name of the contact
	FamilyName pulumi.StringInput `pulumi:"familyName"`
	// Given name of the contact
	GivenName pulumi.StringInput `pulumi:"givenName"`
	// Whether or not to obfuscate contact email in WHOIS
	MailObfuscated pulumi.BoolPtrInput `pulumi:"mailObfuscated"`
	// The legal name of the organisation. Required for types other than person
	Organisation pulumi.StringPtrInput `pulumi:"organisation"`
	// Phone number for the contact
	Phone pulumi.StringInput `pulumi:"phone"`
	// The state code for the contact
	State pulumi.StringPtrInput `pulumi:"state"`
	// Street Address of the contact
	StreetAddr pulumi.StringInput `pulumi:"streetAddr"`
	// One of 'person', 'company', 'association', 'public body', or 'reseller'
	Type pulumi.StringInput `pulumi:"type"`
	// Postal Code/Zipcode of the contact
	Zip pulumi.StringInput `pulumi:"zip"`
}

func (DomainTechArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainTech)(nil)).Elem()
}

func (i DomainTechArgs) ToDomainTechOutput() DomainTechOutput {
	return i.ToDomainTechOutputWithContext(context.Background())
}

func (i DomainTechArgs) ToDomainTechOutputWithContext(ctx context.Context) DomainTechOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTechOutput)
}

func (i DomainTechArgs) ToDomainTechPtrOutput() DomainTechPtrOutput {
	return i.ToDomainTechPtrOutputWithContext(context.Background())
}

func (i DomainTechArgs) ToDomainTechPtrOutputWithContext(ctx context.Context) DomainTechPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTechOutput).ToDomainTechPtrOutputWithContext(ctx)
}

// DomainTechPtrInput is an input type that accepts DomainTechArgs, DomainTechPtr and DomainTechPtrOutput values.
// You can construct a concrete instance of `DomainTechPtrInput` via:
//
//	        DomainTechArgs{...}
//
//	or:
//
//	        nil
type DomainTechPtrInput interface {
	pulumi.Input

	ToDomainTechPtrOutput() DomainTechPtrOutput
	ToDomainTechPtrOutputWithContext(context.Context) DomainTechPtrOutput
}

type domainTechPtrType DomainTechArgs

func DomainTechPtr(v *DomainTechArgs) DomainTechPtrInput {
	return (*domainTechPtrType)(v)
}

func (*domainTechPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainTech)(nil)).Elem()
}

func (i *domainTechPtrType) ToDomainTechPtrOutput() DomainTechPtrOutput {
	return i.ToDomainTechPtrOutputWithContext(context.Background())
}

func (i *domainTechPtrType) ToDomainTechPtrOutputWithContext(ctx context.Context) DomainTechPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTechPtrOutput)
}

type DomainTechOutput struct{ *pulumi.OutputState }

func (DomainTechOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainTech)(nil)).Elem()
}

func (o DomainTechOutput) ToDomainTechOutput() DomainTechOutput {
	return o
}

func (o DomainTechOutput) ToDomainTechOutputWithContext(ctx context.Context) DomainTechOutput {
	return o
}

func (o DomainTechOutput) ToDomainTechPtrOutput() DomainTechPtrOutput {
	return o.ToDomainTechPtrOutputWithContext(context.Background())
}

func (o DomainTechOutput) ToDomainTechPtrOutputWithContext(ctx context.Context) DomainTechPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainTech) *DomainTech {
		return &v
	}).(DomainTechPtrOutput)
}

// City for the contact
func (o DomainTechOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTech) string { return v.City }).(pulumi.StringOutput)
}

// The two letter country code for the contact
func (o DomainTechOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTech) string { return v.Country }).(pulumi.StringOutput)
}

// Whether or not to obfuscate contact data in WHOIS
func (o DomainTechOutput) DataObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainTech) *bool { return v.DataObfuscated }).(pulumi.BoolPtrOutput)
}

// Contact email address
func (o DomainTechOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTech) string { return v.Email }).(pulumi.StringOutput)
}

// Extra parameters, needed for some jurisdictions
func (o DomainTechOutput) ExtraParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v DomainTech) map[string]string { return v.ExtraParameters }).(pulumi.StringMapOutput)
}

// Family name of the contact
func (o DomainTechOutput) FamilyName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTech) string { return v.FamilyName }).(pulumi.StringOutput)
}

// Given name of the contact
func (o DomainTechOutput) GivenName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTech) string { return v.GivenName }).(pulumi.StringOutput)
}

// Whether or not to obfuscate contact email in WHOIS
func (o DomainTechOutput) MailObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainTech) *bool { return v.MailObfuscated }).(pulumi.BoolPtrOutput)
}

// The legal name of the organisation. Required for types other than person
func (o DomainTechOutput) Organisation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainTech) *string { return v.Organisation }).(pulumi.StringPtrOutput)
}

// Phone number for the contact
func (o DomainTechOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTech) string { return v.Phone }).(pulumi.StringOutput)
}

// The state code for the contact
func (o DomainTechOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainTech) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Street Address of the contact
func (o DomainTechOutput) StreetAddr() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTech) string { return v.StreetAddr }).(pulumi.StringOutput)
}

// One of 'person', 'company', 'association', 'public body', or 'reseller'
func (o DomainTechOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTech) string { return v.Type }).(pulumi.StringOutput)
}

// Postal Code/Zipcode of the contact
func (o DomainTechOutput) Zip() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTech) string { return v.Zip }).(pulumi.StringOutput)
}

type DomainTechPtrOutput struct{ *pulumi.OutputState }

func (DomainTechPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainTech)(nil)).Elem()
}

func (o DomainTechPtrOutput) ToDomainTechPtrOutput() DomainTechPtrOutput {
	return o
}

func (o DomainTechPtrOutput) ToDomainTechPtrOutputWithContext(ctx context.Context) DomainTechPtrOutput {
	return o
}

func (o DomainTechPtrOutput) Elem() DomainTechOutput {
	return o.ApplyT(func(v *DomainTech) DomainTech {
		if v != nil {
			return *v
		}
		var ret DomainTech
		return ret
	}).(DomainTechOutput)
}

// City for the contact
func (o DomainTechPtrOutput) City() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainTech) *string {
		if v == nil {
			return nil
		}
		return &v.City
	}).(pulumi.StringPtrOutput)
}

// The two letter country code for the contact
func (o DomainTechPtrOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainTech) *string {
		if v == nil {
			return nil
		}
		return &v.Country
	}).(pulumi.StringPtrOutput)
}

// Whether or not to obfuscate contact data in WHOIS
func (o DomainTechPtrOutput) DataObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainTech) *bool {
		if v == nil {
			return nil
		}
		return v.DataObfuscated
	}).(pulumi.BoolPtrOutput)
}

// Contact email address
func (o DomainTechPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainTech) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// Extra parameters, needed for some jurisdictions
func (o DomainTechPtrOutput) ExtraParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DomainTech) map[string]string {
		if v == nil {
			return nil
		}
		return v.ExtraParameters
	}).(pulumi.StringMapOutput)
}

// Family name of the contact
func (o DomainTechPtrOutput) FamilyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainTech) *string {
		if v == nil {
			return nil
		}
		return &v.FamilyName
	}).(pulumi.StringPtrOutput)
}

// Given name of the contact
func (o DomainTechPtrOutput) GivenName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainTech) *string {
		if v == nil {
			return nil
		}
		return &v.GivenName
	}).(pulumi.StringPtrOutput)
}

// Whether or not to obfuscate contact email in WHOIS
func (o DomainTechPtrOutput) MailObfuscated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainTech) *bool {
		if v == nil {
			return nil
		}
		return v.MailObfuscated
	}).(pulumi.BoolPtrOutput)
}

// The legal name of the organisation. Required for types other than person
func (o DomainTechPtrOutput) Organisation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainTech) *string {
		if v == nil {
			return nil
		}
		return v.Organisation
	}).(pulumi.StringPtrOutput)
}

// Phone number for the contact
func (o DomainTechPtrOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainTech) *string {
		if v == nil {
			return nil
		}
		return &v.Phone
	}).(pulumi.StringPtrOutput)
}

// The state code for the contact
func (o DomainTechPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainTech) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Street Address of the contact
func (o DomainTechPtrOutput) StreetAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainTech) *string {
		if v == nil {
			return nil
		}
		return &v.StreetAddr
	}).(pulumi.StringPtrOutput)
}

// One of 'person', 'company', 'association', 'public body', or 'reseller'
func (o DomainTechPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainTech) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Postal Code/Zipcode of the contact
func (o DomainTechPtrOutput) Zip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainTech) *string {
		if v == nil {
			return nil
		}
		return &v.Zip
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainAdminInput)(nil)).Elem(), DomainAdminArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainAdminPtrInput)(nil)).Elem(), DomainAdminArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainBillingInput)(nil)).Elem(), DomainBillingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainBillingPtrInput)(nil)).Elem(), DomainBillingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainOwnerInput)(nil)).Elem(), DomainOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainOwnerPtrInput)(nil)).Elem(), DomainOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainTechInput)(nil)).Elem(), DomainTechArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainTechPtrInput)(nil)).Elem(), DomainTechArgs{})
	pulumi.RegisterOutputType(DomainAdminOutput{})
	pulumi.RegisterOutputType(DomainAdminPtrOutput{})
	pulumi.RegisterOutputType(DomainBillingOutput{})
	pulumi.RegisterOutputType(DomainBillingPtrOutput{})
	pulumi.RegisterOutputType(DomainOwnerOutput{})
	pulumi.RegisterOutputType(DomainOwnerPtrOutput{})
	pulumi.RegisterOutputType(DomainTechOutput{})
	pulumi.RegisterOutputType(DomainTechPtrOutput{})
}
