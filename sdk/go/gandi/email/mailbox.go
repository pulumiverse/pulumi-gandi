// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package email

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-gandi/sdk/v2/go/gandi/internal"
)

type Mailbox struct {
	pulumi.CustomResourceState

	// Aliases for email
	Aliases pulumi.StringArrayOutput `pulumi:"aliases"`
	// Domain name
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Login
	Login pulumi.StringOutput `pulumi:"login"`
	// Mailbox type
	MailboxType pulumi.StringPtrOutput `pulumi:"mailboxType"`
	// Password
	Password pulumi.StringOutput `pulumi:"password"`
}

// NewMailbox registers a new resource with the given unique name, arguments, and options.
func NewMailbox(ctx *pulumi.Context,
	name string, args *MailboxArgs, opts ...pulumi.ResourceOption) (*Mailbox, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Login == nil {
		return nil, errors.New("invalid value for required argument 'Login'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Mailbox
	err := ctx.RegisterResource("gandi:email/mailbox:Mailbox", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMailbox gets an existing Mailbox resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMailbox(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MailboxState, opts ...pulumi.ResourceOption) (*Mailbox, error) {
	var resource Mailbox
	err := ctx.ReadResource("gandi:email/mailbox:Mailbox", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Mailbox resources.
type mailboxState struct {
	// Aliases for email
	Aliases []string `pulumi:"aliases"`
	// Domain name
	Domain *string `pulumi:"domain"`
	// Login
	Login *string `pulumi:"login"`
	// Mailbox type
	MailboxType *string `pulumi:"mailboxType"`
	// Password
	Password *string `pulumi:"password"`
}

type MailboxState struct {
	// Aliases for email
	Aliases pulumi.StringArrayInput
	// Domain name
	Domain pulumi.StringPtrInput
	// Login
	Login pulumi.StringPtrInput
	// Mailbox type
	MailboxType pulumi.StringPtrInput
	// Password
	Password pulumi.StringPtrInput
}

func (MailboxState) ElementType() reflect.Type {
	return reflect.TypeOf((*mailboxState)(nil)).Elem()
}

type mailboxArgs struct {
	// Aliases for email
	Aliases []string `pulumi:"aliases"`
	// Domain name
	Domain string `pulumi:"domain"`
	// Login
	Login string `pulumi:"login"`
	// Mailbox type
	MailboxType *string `pulumi:"mailboxType"`
	// Password
	Password string `pulumi:"password"`
}

// The set of arguments for constructing a Mailbox resource.
type MailboxArgs struct {
	// Aliases for email
	Aliases pulumi.StringArrayInput
	// Domain name
	Domain pulumi.StringInput
	// Login
	Login pulumi.StringInput
	// Mailbox type
	MailboxType pulumi.StringPtrInput
	// Password
	Password pulumi.StringInput
}

func (MailboxArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mailboxArgs)(nil)).Elem()
}

type MailboxInput interface {
	pulumi.Input

	ToMailboxOutput() MailboxOutput
	ToMailboxOutputWithContext(ctx context.Context) MailboxOutput
}

func (*Mailbox) ElementType() reflect.Type {
	return reflect.TypeOf((**Mailbox)(nil)).Elem()
}

func (i *Mailbox) ToMailboxOutput() MailboxOutput {
	return i.ToMailboxOutputWithContext(context.Background())
}

func (i *Mailbox) ToMailboxOutputWithContext(ctx context.Context) MailboxOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MailboxOutput)
}

// MailboxArrayInput is an input type that accepts MailboxArray and MailboxArrayOutput values.
// You can construct a concrete instance of `MailboxArrayInput` via:
//
//	MailboxArray{ MailboxArgs{...} }
type MailboxArrayInput interface {
	pulumi.Input

	ToMailboxArrayOutput() MailboxArrayOutput
	ToMailboxArrayOutputWithContext(context.Context) MailboxArrayOutput
}

type MailboxArray []MailboxInput

func (MailboxArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mailbox)(nil)).Elem()
}

func (i MailboxArray) ToMailboxArrayOutput() MailboxArrayOutput {
	return i.ToMailboxArrayOutputWithContext(context.Background())
}

func (i MailboxArray) ToMailboxArrayOutputWithContext(ctx context.Context) MailboxArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MailboxArrayOutput)
}

// MailboxMapInput is an input type that accepts MailboxMap and MailboxMapOutput values.
// You can construct a concrete instance of `MailboxMapInput` via:
//
//	MailboxMap{ "key": MailboxArgs{...} }
type MailboxMapInput interface {
	pulumi.Input

	ToMailboxMapOutput() MailboxMapOutput
	ToMailboxMapOutputWithContext(context.Context) MailboxMapOutput
}

type MailboxMap map[string]MailboxInput

func (MailboxMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mailbox)(nil)).Elem()
}

func (i MailboxMap) ToMailboxMapOutput() MailboxMapOutput {
	return i.ToMailboxMapOutputWithContext(context.Background())
}

func (i MailboxMap) ToMailboxMapOutputWithContext(ctx context.Context) MailboxMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MailboxMapOutput)
}

type MailboxOutput struct{ *pulumi.OutputState }

func (MailboxOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mailbox)(nil)).Elem()
}

func (o MailboxOutput) ToMailboxOutput() MailboxOutput {
	return o
}

func (o MailboxOutput) ToMailboxOutputWithContext(ctx context.Context) MailboxOutput {
	return o
}

// Aliases for email
func (o MailboxOutput) Aliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Mailbox) pulumi.StringArrayOutput { return v.Aliases }).(pulumi.StringArrayOutput)
}

// Domain name
func (o MailboxOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *Mailbox) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Login
func (o MailboxOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *Mailbox) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

// Mailbox type
func (o MailboxOutput) MailboxType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mailbox) pulumi.StringPtrOutput { return v.MailboxType }).(pulumi.StringPtrOutput)
}

// Password
func (o MailboxOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *Mailbox) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

type MailboxArrayOutput struct{ *pulumi.OutputState }

func (MailboxArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mailbox)(nil)).Elem()
}

func (o MailboxArrayOutput) ToMailboxArrayOutput() MailboxArrayOutput {
	return o
}

func (o MailboxArrayOutput) ToMailboxArrayOutputWithContext(ctx context.Context) MailboxArrayOutput {
	return o
}

func (o MailboxArrayOutput) Index(i pulumi.IntInput) MailboxOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Mailbox {
		return vs[0].([]*Mailbox)[vs[1].(int)]
	}).(MailboxOutput)
}

type MailboxMapOutput struct{ *pulumi.OutputState }

func (MailboxMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mailbox)(nil)).Elem()
}

func (o MailboxMapOutput) ToMailboxMapOutput() MailboxMapOutput {
	return o
}

func (o MailboxMapOutput) ToMailboxMapOutputWithContext(ctx context.Context) MailboxMapOutput {
	return o
}

func (o MailboxMapOutput) MapIndex(k pulumi.StringInput) MailboxOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Mailbox {
		return vs[0].(map[string]*Mailbox)[vs[1].(string)]
	}).(MailboxOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MailboxInput)(nil)).Elem(), &Mailbox{})
	pulumi.RegisterInputType(reflect.TypeOf((*MailboxArrayInput)(nil)).Elem(), MailboxArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MailboxMapInput)(nil)).Elem(), MailboxMap{})
	pulumi.RegisterOutputType(MailboxOutput{})
	pulumi.RegisterOutputType(MailboxArrayOutput{})
	pulumi.RegisterOutputType(MailboxMapOutput{})
}
