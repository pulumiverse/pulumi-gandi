// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package email

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-gandi/sdk/v2/go/gandi/internal"
)

type Forwarding struct {
	pulumi.CustomResourceState

	// Forwards to email addresses
	Destinations pulumi.StringArrayOutput `pulumi:"destinations"`
	// Account alias name
	Source pulumi.StringOutput `pulumi:"source"`
}

// NewForwarding registers a new resource with the given unique name, arguments, and options.
func NewForwarding(ctx *pulumi.Context,
	name string, args *ForwardingArgs, opts ...pulumi.ResourceOption) (*Forwarding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destinations == nil {
		return nil, errors.New("invalid value for required argument 'Destinations'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Forwarding
	err := ctx.RegisterResource("gandi:email/forwarding:Forwarding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetForwarding gets an existing Forwarding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetForwarding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ForwardingState, opts ...pulumi.ResourceOption) (*Forwarding, error) {
	var resource Forwarding
	err := ctx.ReadResource("gandi:email/forwarding:Forwarding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Forwarding resources.
type forwardingState struct {
	// Forwards to email addresses
	Destinations []string `pulumi:"destinations"`
	// Account alias name
	Source *string `pulumi:"source"`
}

type ForwardingState struct {
	// Forwards to email addresses
	Destinations pulumi.StringArrayInput
	// Account alias name
	Source pulumi.StringPtrInput
}

func (ForwardingState) ElementType() reflect.Type {
	return reflect.TypeOf((*forwardingState)(nil)).Elem()
}

type forwardingArgs struct {
	// Forwards to email addresses
	Destinations []string `pulumi:"destinations"`
	// Account alias name
	Source string `pulumi:"source"`
}

// The set of arguments for constructing a Forwarding resource.
type ForwardingArgs struct {
	// Forwards to email addresses
	Destinations pulumi.StringArrayInput
	// Account alias name
	Source pulumi.StringInput
}

func (ForwardingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*forwardingArgs)(nil)).Elem()
}

type ForwardingInput interface {
	pulumi.Input

	ToForwardingOutput() ForwardingOutput
	ToForwardingOutputWithContext(ctx context.Context) ForwardingOutput
}

func (*Forwarding) ElementType() reflect.Type {
	return reflect.TypeOf((**Forwarding)(nil)).Elem()
}

func (i *Forwarding) ToForwardingOutput() ForwardingOutput {
	return i.ToForwardingOutputWithContext(context.Background())
}

func (i *Forwarding) ToForwardingOutputWithContext(ctx context.Context) ForwardingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingOutput)
}

// ForwardingArrayInput is an input type that accepts ForwardingArray and ForwardingArrayOutput values.
// You can construct a concrete instance of `ForwardingArrayInput` via:
//
//	ForwardingArray{ ForwardingArgs{...} }
type ForwardingArrayInput interface {
	pulumi.Input

	ToForwardingArrayOutput() ForwardingArrayOutput
	ToForwardingArrayOutputWithContext(context.Context) ForwardingArrayOutput
}

type ForwardingArray []ForwardingInput

func (ForwardingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Forwarding)(nil)).Elem()
}

func (i ForwardingArray) ToForwardingArrayOutput() ForwardingArrayOutput {
	return i.ToForwardingArrayOutputWithContext(context.Background())
}

func (i ForwardingArray) ToForwardingArrayOutputWithContext(ctx context.Context) ForwardingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingArrayOutput)
}

// ForwardingMapInput is an input type that accepts ForwardingMap and ForwardingMapOutput values.
// You can construct a concrete instance of `ForwardingMapInput` via:
//
//	ForwardingMap{ "key": ForwardingArgs{...} }
type ForwardingMapInput interface {
	pulumi.Input

	ToForwardingMapOutput() ForwardingMapOutput
	ToForwardingMapOutputWithContext(context.Context) ForwardingMapOutput
}

type ForwardingMap map[string]ForwardingInput

func (ForwardingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Forwarding)(nil)).Elem()
}

func (i ForwardingMap) ToForwardingMapOutput() ForwardingMapOutput {
	return i.ToForwardingMapOutputWithContext(context.Background())
}

func (i ForwardingMap) ToForwardingMapOutputWithContext(ctx context.Context) ForwardingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingMapOutput)
}

type ForwardingOutput struct{ *pulumi.OutputState }

func (ForwardingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Forwarding)(nil)).Elem()
}

func (o ForwardingOutput) ToForwardingOutput() ForwardingOutput {
	return o
}

func (o ForwardingOutput) ToForwardingOutputWithContext(ctx context.Context) ForwardingOutput {
	return o
}

// Forwards to email addresses
func (o ForwardingOutput) Destinations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Forwarding) pulumi.StringArrayOutput { return v.Destinations }).(pulumi.StringArrayOutput)
}

// Account alias name
func (o ForwardingOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *Forwarding) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

type ForwardingArrayOutput struct{ *pulumi.OutputState }

func (ForwardingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Forwarding)(nil)).Elem()
}

func (o ForwardingArrayOutput) ToForwardingArrayOutput() ForwardingArrayOutput {
	return o
}

func (o ForwardingArrayOutput) ToForwardingArrayOutputWithContext(ctx context.Context) ForwardingArrayOutput {
	return o
}

func (o ForwardingArrayOutput) Index(i pulumi.IntInput) ForwardingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Forwarding {
		return vs[0].([]*Forwarding)[vs[1].(int)]
	}).(ForwardingOutput)
}

type ForwardingMapOutput struct{ *pulumi.OutputState }

func (ForwardingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Forwarding)(nil)).Elem()
}

func (o ForwardingMapOutput) ToForwardingMapOutput() ForwardingMapOutput {
	return o
}

func (o ForwardingMapOutput) ToForwardingMapOutputWithContext(ctx context.Context) ForwardingMapOutput {
	return o
}

func (o ForwardingMapOutput) MapIndex(k pulumi.StringInput) ForwardingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Forwarding {
		return vs[0].(map[string]*Forwarding)[vs[1].(string)]
	}).(ForwardingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardingInput)(nil)).Elem(), &Forwarding{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardingArrayInput)(nil)).Elem(), ForwardingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardingMapInput)(nil)).Elem(), ForwardingMap{})
	pulumi.RegisterOutputType(ForwardingOutput{})
	pulumi.RegisterOutputType(ForwardingArrayOutput{})
	pulumi.RegisterOutputType(ForwardingMapOutput{})
}
