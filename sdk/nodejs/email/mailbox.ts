// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Mailbox extends pulumi.CustomResource {
    /**
     * Get an existing Mailbox resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MailboxState, opts?: pulumi.CustomResourceOptions): Mailbox {
        return new Mailbox(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gandi:email/mailbox:Mailbox';

    /**
     * Returns true if the given object is an instance of Mailbox.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Mailbox {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Mailbox.__pulumiType;
    }

    /**
     * Aliases for email
     */
    declare public readonly aliases: pulumi.Output<string[] | undefined>;
    /**
     * Domain name
     */
    declare public readonly domain: pulumi.Output<string>;
    /**
     * Login
     */
    declare public readonly login: pulumi.Output<string>;
    /**
     * Mailbox type
     */
    declare public readonly mailboxType: pulumi.Output<string | undefined>;
    /**
     * Password
     */
    declare public readonly password: pulumi.Output<string>;

    /**
     * Create a Mailbox resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MailboxArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MailboxArgs | MailboxState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MailboxState | undefined;
            resourceInputs["aliases"] = state?.aliases;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["login"] = state?.login;
            resourceInputs["mailboxType"] = state?.mailboxType;
            resourceInputs["password"] = state?.password;
        } else {
            const args = argsOrState as MailboxArgs | undefined;
            if (args?.domain === undefined && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if (args?.login === undefined && !opts.urn) {
                throw new Error("Missing required property 'login'");
            }
            if (args?.password === undefined && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            resourceInputs["aliases"] = args?.aliases;
            resourceInputs["domain"] = args?.domain;
            resourceInputs["login"] = args?.login;
            resourceInputs["mailboxType"] = args?.mailboxType;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Mailbox.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Mailbox resources.
 */
export interface MailboxState {
    /**
     * Aliases for email
     */
    aliases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Domain name
     */
    domain?: pulumi.Input<string>;
    /**
     * Login
     */
    login?: pulumi.Input<string>;
    /**
     * Mailbox type
     */
    mailboxType?: pulumi.Input<string>;
    /**
     * Password
     */
    password?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Mailbox resource.
 */
export interface MailboxArgs {
    /**
     * Aliases for email
     */
    aliases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Domain name
     */
    domain: pulumi.Input<string>;
    /**
     * Login
     */
    login: pulumi.Input<string>;
    /**
     * Mailbox type
     */
    mailboxType?: pulumi.Input<string>;
    /**
     * Password
     */
    password: pulumi.Input<string>;
}
