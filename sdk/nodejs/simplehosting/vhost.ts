// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class VHost extends pulumi.CustomResource {
    /**
     * Get an existing VHost resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VHostState, opts?: pulumi.CustomResourceOptions): VHost {
        return new VHost(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gandi:simplehosting/vHost:VHost';

    /**
     * Returns true if the given object is an instance of VHost.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VHost {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VHost.__pulumiType;
    }

    /**
     * The name of an application to install ('grav', 'matomo', 'nextcloud', 'prestashop', 'wordpress')
     */
    declare public readonly application: pulumi.Output<string | undefined>;
    /**
     * The ID of the created free certificate
     */
    declare public /*out*/ readonly certificateId: pulumi.Output<string>;
    /**
     * The FQDN of the Vhost
     */
    declare public readonly fqdn: pulumi.Output<string>;
    /**
     * The ID of the SimpleHosting instance
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * Whether to alter the linked DNS Zone
     */
    declare public readonly linkedDnsZoneAlteration: pulumi.Output<boolean | undefined>;

    /**
     * Create a VHost resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VHostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VHostArgs | VHostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VHostState | undefined;
            resourceInputs["application"] = state?.application;
            resourceInputs["certificateId"] = state?.certificateId;
            resourceInputs["fqdn"] = state?.fqdn;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["linkedDnsZoneAlteration"] = state?.linkedDnsZoneAlteration;
        } else {
            const args = argsOrState as VHostArgs | undefined;
            if (args?.fqdn === undefined && !opts.urn) {
                throw new Error("Missing required property 'fqdn'");
            }
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["application"] = args?.application;
            resourceInputs["fqdn"] = args?.fqdn;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["linkedDnsZoneAlteration"] = args?.linkedDnsZoneAlteration;
            resourceInputs["certificateId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VHost.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VHost resources.
 */
export interface VHostState {
    /**
     * The name of an application to install ('grav', 'matomo', 'nextcloud', 'prestashop', 'wordpress')
     */
    application?: pulumi.Input<string>;
    /**
     * The ID of the created free certificate
     */
    certificateId?: pulumi.Input<string>;
    /**
     * The FQDN of the Vhost
     */
    fqdn?: pulumi.Input<string>;
    /**
     * The ID of the SimpleHosting instance
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Whether to alter the linked DNS Zone
     */
    linkedDnsZoneAlteration?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a VHost resource.
 */
export interface VHostArgs {
    /**
     * The name of an application to install ('grav', 'matomo', 'nextcloud', 'prestashop', 'wordpress')
     */
    application?: pulumi.Input<string>;
    /**
     * The FQDN of the Vhost
     */
    fqdn: pulumi.Input<string>;
    /**
     * The ID of the SimpleHosting instance
     */
    instanceId: pulumi.Input<string>;
    /**
     * Whether to alter the linked DNS Zone
     */
    linkedDnsZoneAlteration?: pulumi.Input<boolean>;
}
