// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gandi:simplehosting/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * The name of the database type ('mysql' or 'pgsql')
     */
    declare public readonly databaseName: pulumi.Output<string>;
    /**
     * The name of the language ('php', 'python', 'nodejs' or 'ruby')
     */
    declare public readonly languageName: pulumi.Output<string>;
    /**
     * The datacenter location of the instance ('FR' or 'LU')
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The name of the SimpleHosting instance
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The size of the SimpleHosting instance ('s+', 'm', 'l' or 'xxl')
     */
    declare public readonly size: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["databaseName"] = state?.databaseName;
            resourceInputs["languageName"] = state?.languageName;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["size"] = state?.size;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if (args?.databaseName === undefined && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if (args?.languageName === undefined && !opts.urn) {
                throw new Error("Missing required property 'languageName'");
            }
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.size === undefined && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["databaseName"] = args?.databaseName;
            resourceInputs["languageName"] = args?.languageName;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["size"] = args?.size;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * The name of the database type ('mysql' or 'pgsql')
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The name of the language ('php', 'python', 'nodejs' or 'ruby')
     */
    languageName?: pulumi.Input<string>;
    /**
     * The datacenter location of the instance ('FR' or 'LU')
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the SimpleHosting instance
     */
    name?: pulumi.Input<string>;
    /**
     * The size of the SimpleHosting instance ('s+', 'm', 'l' or 'xxl')
     */
    size?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * The name of the database type ('mysql' or 'pgsql')
     */
    databaseName: pulumi.Input<string>;
    /**
     * The name of the language ('php', 'python', 'nodejs' or 'ruby')
     */
    languageName: pulumi.Input<string>;
    /**
     * The datacenter location of the instance ('FR' or 'LU')
     */
    location: pulumi.Input<string>;
    /**
     * The name of the SimpleHosting instance
     */
    name?: pulumi.Input<string>;
    /**
     * The size of the SimpleHosting instance ('s+', 'm', 'l' or 'xxl')
     */
    size: pulumi.Input<string>;
}
