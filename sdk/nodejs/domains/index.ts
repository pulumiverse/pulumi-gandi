// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DNSSecKeyArgs, DNSSecKeyState } from "./dnssecKey";
export type DNSSecKey = import("./dnssecKey").DNSSecKey;
export const DNSSecKey: typeof import("./dnssecKey").DNSSecKey = null as any;
utilities.lazyLoad(exports, ["DNSSecKey"], () => require("./dnssecKey"));

export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { GetDomainArgs, GetDomainResult, GetDomainOutputArgs } from "./getDomain";
export const getDomain: typeof import("./getDomain").getDomain = null as any;
export const getDomainOutput: typeof import("./getDomain").getDomainOutput = null as any;
utilities.lazyLoad(exports, ["getDomain","getDomainOutput"], () => require("./getDomain"));

export { GetGlueRecordArgs, GetGlueRecordResult, GetGlueRecordOutputArgs } from "./getGlueRecord";
export const getGlueRecord: typeof import("./getGlueRecord").getGlueRecord = null as any;
export const getGlueRecordOutput: typeof import("./getGlueRecord").getGlueRecordOutput = null as any;
utilities.lazyLoad(exports, ["getGlueRecord","getGlueRecordOutput"], () => require("./getGlueRecord"));

export { GlueRecordArgs, GlueRecordState } from "./glueRecord";
export type GlueRecord = import("./glueRecord").GlueRecord;
export const GlueRecord: typeof import("./glueRecord").GlueRecord = null as any;
utilities.lazyLoad(exports, ["GlueRecord"], () => require("./glueRecord"));

export { NameserversArgs, NameserversState } from "./nameservers";
export type Nameservers = import("./nameservers").Nameservers;
export const Nameservers: typeof import("./nameservers").Nameservers = null as any;
utilities.lazyLoad(exports, ["Nameservers"], () => require("./nameservers"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gandi:domains/dNSSecKey:DNSSecKey":
                return new DNSSecKey(name, <any>undefined, { urn })
            case "gandi:domains/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "gandi:domains/glueRecord:GlueRecord":
                return new GlueRecord(name, <any>undefined, { urn })
            case "gandi:domains/nameservers:Nameservers":
                return new Nameservers(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gandi", "domains/dNSSecKey", _module)
pulumi.runtime.registerResourceModule("gandi", "domains/domain", _module)
pulumi.runtime.registerResourceModule("gandi", "domains/glueRecord", _module)
pulumi.runtime.registerResourceModule("gandi", "domains/nameservers", _module)
