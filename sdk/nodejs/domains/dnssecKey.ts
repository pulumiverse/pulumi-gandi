// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class DNSSecKey extends pulumi.CustomResource {
    /**
     * Get an existing DNSSecKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DNSSecKeyState, opts?: pulumi.CustomResourceOptions): DNSSecKey {
        return new DNSSecKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gandi:domains/dNSSecKey:DNSSecKey';

    /**
     * Returns true if the given object is an instance of DNSSecKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DNSSecKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DNSSecKey.__pulumiType;
    }

    /**
     * DNSSEC algorithm type
     */
    declare public readonly algorithm: pulumi.Output<number>;
    /**
     * Domain name
     */
    declare public readonly domain: pulumi.Output<string>;
    /**
     * DNSSEC public key
     */
    declare public readonly publicKey: pulumi.Output<string>;
    /**
     * DNSSEC key type
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a DNSSecKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DNSSecKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DNSSecKeyArgs | DNSSecKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DNSSecKeyState | undefined;
            resourceInputs["algorithm"] = state?.algorithm;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["publicKey"] = state?.publicKey;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as DNSSecKeyArgs | undefined;
            if (args?.algorithm === undefined && !opts.urn) {
                throw new Error("Missing required property 'algorithm'");
            }
            if (args?.domain === undefined && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if (args?.publicKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'publicKey'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["algorithm"] = args?.algorithm;
            resourceInputs["domain"] = args?.domain;
            resourceInputs["publicKey"] = args?.publicKey;
            resourceInputs["type"] = args?.type;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DNSSecKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DNSSecKey resources.
 */
export interface DNSSecKeyState {
    /**
     * DNSSEC algorithm type
     */
    algorithm?: pulumi.Input<number>;
    /**
     * Domain name
     */
    domain?: pulumi.Input<string>;
    /**
     * DNSSEC public key
     */
    publicKey?: pulumi.Input<string>;
    /**
     * DNSSEC key type
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DNSSecKey resource.
 */
export interface DNSSecKeyArgs {
    /**
     * DNSSEC algorithm type
     */
    algorithm: pulumi.Input<number>;
    /**
     * Domain name
     */
    domain: pulumi.Input<string>;
    /**
     * DNSSEC public key
     */
    publicKey: pulumi.Input<string>;
    /**
     * DNSSEC key type
     */
    type: pulumi.Input<string>;
}
